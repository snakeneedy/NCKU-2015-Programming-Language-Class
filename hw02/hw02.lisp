(defun readList (N)
	(loop for i from 1 to N collect (read)) 
)
(defun half (x)
	(floor (/ x 2))
)
(defun halfLength (lst)
	(half (length lst))
)
(defun mergesort (lst)
	(cond
		((<= (length lst) 1) lst)
		(t (combine (mergesort (leftList lst (halfLength lst))) (mergesort(rightList lst (halfLength lst)))))
	)
)
(defun combine (left right)
	(cond
		((<= (length left) 0) right)
		((<= (length right) 0) left)
		((<= (car left) (car right)) (cons (car left) (combine (cdr left) right)))
		((> (car left) (car right)) (cons (car right) (combine left (cdr right))))
	)
)
; index from -1(NIL) to (mid - 1)
(defun leftList (lst mid)
	(cond
		((<= mid 0) nil)
		(t (cons (car lst) (leftList (cdr lst) (- mid 1))))
	)
)
; index from mid to (length - 1)
(defun rightList (lst mid)
	(cond
		((<= mid 0) lst)
		(t (rightList (cdr lst) (- mid 1)))
	)
)
; main ()
(format t "~A~%" (mergesort (readList (read))))
